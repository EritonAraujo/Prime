#Attempt to calculate the PainleveVI using quadratures
using SpecialFunctions
using LinearAlgebra
using Base.Threads
using SingularIntegralEquations.HypergeometricFunctions
using FastGaussQuadrature


JULIA_NUM_THREADS=8
N = 10
R = 10
function frickejimbo(Pμ, Pμν)
    b = Pμν[1]*Pμν[2] - Pμ[1]*Pμ[3] - Pμ[2]*Pμ[4];
    c = (Pμν[1])^2 +(Pμν[2])^2 +(Pμ[1])^2 +(Pμ[2])^2 +(Pμ[3])^2 +(Pμ[4])^2 +
        (Pμ[1]*Pμ[2]*Pμ[3]*Pμ[4])-Pμν[1]*(Pμ[1]*Pμ[2]+Pμ[3]*Pμ[4])-
        Pμν[2]*(Pμ[1]*Pμ[4]+Pμ[2]*Pμ[3]);

     return (-b - sqrt((b^2 - 4c)))/2
end

function computeη(θμ, θμν, t0 = 0)
    Pμ = (2 .*(cosc.(θμ)));
    Pμν = (2 .*(cosc.(θμν)));

    Pμν[3] = frickejimbo(Pμ, Pμν);

    if (t0 ==0)
        prefactor = Pμ[2]*Pμ[3] + Pμ[1]*Pμ[4] - 2Pμν[2] - Pμν[1]*Pμν[3] -
                    (Pμ[1]*Pμ[3] + Pμ[2]*Pμ[4] - 2Pμν[3] - Pμν[1]*Pμν[2])*
                    (exp(θμν[1]*im*pi));
    else
        prefactor = Pμ[2]*Pμ[3] + Pμ[1]*Pμ[4] - 2Pμν[2] - Pμν[3]*Pμν[1] -
                    (Pμ[1]*Pμ[3] + Pμ[2]*Pμ[4] - 2Pμν[3] - Pμν[2]*Pμν[1])*
                    (exp(-θμν[1]*pi*im));
    end

    hugeΓfac = (gamma(1-θμν[1])^2)*gamma(1+(θμ[2]+θμ[1]+θμν[1])/2)*
                gamma(1+(θμ[2]-θμ[1]+θμν[1])/2)*gamma(1+(θμ[3]+θμ[4]+θμν[1])/2)*
                gamma(1+(θμ[3]-θμ[4]+θμν[1])/2)/
                (16*(pi^2)*sinpi((θμν[1]+θμ[1]-θμ[2])/2)*
                sinpi((θμν[1]-θμ[3]+θμ[4])/2))*
                gamma((θμν[1]-θμ[1]-θμ[2])/2)*gamma((θμν[1]-θμ[3]-θμ[4])/2)*
                (gamma(1+θμν[1])^2)*gamma(1+(θμ[2]-θμ[1]-θμν[1])/2)*
                gamma(1+(θμ[3]-θμ[4]-θμν[1])/2);
    return (hugeΓfac*prefactor)
end

function Invseries(ser) #ser only being a 2x2 matrix vector
    Inverse = zeros(ComplexF64, 2, 2, N+1);
    Inverse[:,:,1] = Matrix{ComplexF64}(I, 2,2);
    for i = 2:(N+1)
        A = -ser[:,:,i];
        for j = 2:(i)
            A += - (ser[:,:,j]*Inverse[:,:,(1+i-j)]);
        end
        Inverse[:,:,i] = A
    end
    return Inverse
end

#Here I start testing the Quadrature Method for the Fredholm Det.
function Kera(θμ, σ)
    n,w = gausslegendre(N)
    kernela = zeros(ComplexF64, 2N, 2N)
    Threads.@threads for i = 1:N
        Threads.@threads for j = 1:N
            if (i == j)
                kernela[i,j] = (sqrt(w[i]))*(( (1-(R*(exp(pi*im*n[j]))))^(2θμ[3]) *
            ((((θμ[3]+θμ[4]+σ)*(θμ[3]-θμ[4]+σ)/2σ)*
            _₂F₁((θμ[3]+θμ[4]+σ+1),(θμ[3]-θμ[4]+σ+1),2σ+1,(R*(exp(pi*im*n[i])))))*
            _₂F₁((θμ[3]+θμ[4]-σ),(θμ[3]-θμ[4]-σ),-2σ,(R*(exp(pi*im*n[j]))))) -
            ( (((((R*(exp(pi*im*(n[i]))))))*((1+θμ[3]+θμ[4]+σ)*(θμ[3]-θμ[4]+σ)/(2+2σ))*
            _₂F₁((2+θμ[3]+θμ[4]+σ),(2+θμ[3]-θμ[4]+σ),3+2σ,(R*(exp(pi*im*(n[i]))))))+
            _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*(n[i]))))))*
            _₂F₁((1+θμ[3]+θμ[4]-σ),(1+θμ[3]-θμ[4]-σ),2-2σ,(R*(exp(pi*im*(n[j])))))*
            ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))
            *(-(θμ[4]^2 -(θμ[3]-σ)^2)/(2σ*(1-2σ)))
            *(R*(exp(pi*im*n[j]))) ) )- 1)*sqrt(w[j])*(R*(exp(pi*im*n[j]))/2);
            else
                kernela[i,j] = (sqrt(w[i]))*((( (1-(R*(exp(pi*im*n[j]))))^(2θμ[3]) *
            ((_₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[i])))))*
            _₂F₁((θμ[3]+θμ[4]-σ),(θμ[3]-θμ[4]-σ),-2σ,(R*(exp(pi*im*n[j]))))) -
            (_₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*(n[i]))))*
            _₂F₁((1+θμ[3]+θμ[4]-σ),(1+θμ[3]-θμ[4]-σ),2-2σ,(R*(exp(pi*im*(n[j])))))*
            ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))
            *(-(θμ[4]^2 -(θμ[3]-σ)^2)/(2σ*(1-2σ)))
            *((R*(exp(pi*im*(n[i]))))*(R*(exp(pi*im*n[j])))))))- 1)*sqrt(w[j])/
            (((R*(exp(pi*im*n[i]))))-((R*(exp(pi*im*n[j]))))))*(R*(exp(pi*im*n[j]))/2);
        end
        end
    end
    Threads.@threads for i = 1:N
        Threads.@threads for j = 1:N
            if (i == j )
                kernela[i,(j+N)] = (((1-(R*(exp(pi*im*n[j]))))^(2θμ[3]))*
                ((_₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[j]))))*
                ((((R*(exp(pi*im*n[i]))))*
                _₂F₁((2+θμ[3]+θμ[4]+σ),(2+θμ[3]-θμ[4]+σ),3+2σ,(R*(exp(pi*im*n[i])))) ) +
                _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2σ+2,(R*(exp(pi*im*n[i]))))))*
                ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ))) ) -
                (((θμ[3]+θμ[4]+σ)*(θμ[3]-θμ[4]+σ)/2σ)*_₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2σ+1,(R*(exp(pi*im*n[i]))))*
                _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*n[j]))))*
                ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))*(R*(exp(pi*im*n[i])))))*
                sqrt(w[j])*sqrt(w[i])*(R*(exp(pi*im*n[j]))/2);
            else
                kernela[i,(j+N)] = (((1-(R*(exp(pi*im*n[j]))))^(2θμ[3]))*
                ((_₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[j]))))*
                _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*n[i]))))*
                ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))*(R*(exp(pi*im*n[i])))) -
                (_₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[i]))))*
                _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*n[j]))))*
                ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))*(R*(exp(pi*im*n[i]))))))*
                sqrt(w[j])*sqrt(w[i])*(R*(exp(pi*im*n[j]))/2)/
                (((R*(exp(pi*im*n[i]))))-((R*(exp(pi*im*n[j])))));
            end
        end
    end
    Threads.@threads for i = 1:N
        Threads.@threads for j = 1:N
            if (i == j )
                kernela[(i+N),j] = (((1-(R*(exp(pi*im*n[j]))))^(2θμ[3]))*
                ((_₂F₁((θμ[3]+θμ[4]-σ),(θμ[3]-θμ[4]-σ),-2σ,(R*(exp(pi*im*n[j]))))*
                ((((R*(exp(pi*im*n[i]))))*
                _₂F₁((2+θμ[3]+θμ[4]-σ),(2+θμ[3]-θμ[4]-σ),3-2σ,(R*(exp(pi*im*n[i])))) ) +
                _₂F₁((1+θμ[3]+θμ[4]-σ),(1+θμ[3]-θμ[4]-σ),2-2σ,(R*(exp(pi*im*n[i]))))))*
                ((θμ[4]^2 -(θμ[3]-σ)^2)/(2σ*(1-2σ))) ) -
                (((θμ[3]+θμ[4]-σ)*(θμ[3]-θμ[4]-σ)/(-2σ))*_₂F₁((1+θμ[3]+θμ[4]-σ),(1+θμ[3]-θμ[4]-σ),(1-2σ),(R*(exp(pi*im*n[i]))))*
                _₂F₁((1+θμ[3]+θμ[4]-σ),(1+θμ[3]-θμ[4]-σ),2-2σ,(R*(exp(pi*im*n[j]))))*
                ((θμ[4]^2 -(θμ[3]-σ)^2)/(2σ*(1-2σ)))*(R*(exp(pi*im*n[i])))))*
                sqrt(w[j])*sqrt(w[i])*(R*(exp(pi*im*n[j]))/2);
            else
                kernela[(i+N),j] = (((1-(R*(exp(pi*im*n[j]))))^(2θμ[3]))*
                ((_₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[j]))))*
                _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*n[i]))))*
                ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))*(R*(exp(pi*im*n[i])))) -
                (_₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[i]))))*
                _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*n[j]))))*
                ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))*(R*(exp(pi*im*n[i]))))))*
                sqrt(w[j])*sqrt(w[i])*(R*(exp(pi*im*n[j]))/2)/
                (((R*(exp(pi*im*n[i]))))-((R*(exp(pi*im*n[j])))));
            end
        end
    end
    Threads.@threads for i = 1:N
        Threads.@threads for j = 1:N
            if (i == j)
                kernela[i,j] = (sqrt(w[i]))*(( (1-(R*(exp(pi*im*n[j]))))^(2θμ[3]) *
            ((((θμ[3]+θμ[4]-σ)*(θμ[3]-θμ[4]-σ)/(-2σ))*
            _₂F₁((θμ[3]+θμ[4]-σ+1),(θμ[3]-θμ[4]-σ+1),1-2σ,(R*(exp(pi*im*n[i])))))*
            _₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[j]))))) -
            ( (((((R*(exp(pi*im*(n[i]))))))*((1+θμ[3]+θμ[4]-σ)*(θμ[3]-θμ[4]-σ)/(2-2σ))*
            _₂F₁((2+θμ[3]+θμ[4]-σ),(2+θμ[3]-θμ[4]-σ),3-2σ,(R*(exp(pi*im*(n[i]))))))+
            _₂F₁((1+θμ[3]+θμ[4]-σ),(1+θμ[3]-θμ[4]-σ),2-2σ,(R*(exp(pi*im*(n[i]))))))*
            _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*(n[j])))))*
            ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))
            *(-(θμ[4]^2 -(θμ[3]-σ)^2)/(2σ*(1-2σ)))
            *(R*(exp(pi*im*n[j]))) ) )- 1)*sqrt(w[j])*(R*(exp(pi*im*n[j]))/2);
            else
                kernela[i,j] = (sqrt(w[i]))*((( (1-(R*(exp(pi*im*n[j]))))^(2θμ[3]) *
            ((_₂F₁((θμ[3]+θμ[4]-σ),(θμ[3]-θμ[4]-σ),(-2σ),(R*(exp(pi*im*n[i])))))*
            _₂F₁((θμ[3]+θμ[4]+σ),(θμ[3]-θμ[4]+σ),2σ,(R*(exp(pi*im*n[j]))))) -
            (_₂F₁((1+θμ[3]+θμ[4]-σ),(1+θμ[3]-θμ[4]-σ),2-2σ,(R*(exp(pi*im*(n[i]))))*
            _₂F₁((1+θμ[3]+θμ[4]+σ),(1+θμ[3]-θμ[4]+σ),2+2σ,(R*(exp(pi*im*(n[j])))))*
            ((θμ[4]^2 -(θμ[3]+σ)^2)/(2σ*(1+2σ)))
            *(-(θμ[4]^2 -(θμ[3]-σ)^2)/(2σ*(1-2σ)))
            *((R*(exp(pi*im*(n[i]))))*(R*(exp(pi*im*n[j])))))))- 1)*sqrt(w[j])/
            (((R*(exp(pi*im*n[i]))))-((R*(exp(pi*im*n[j]))))))*(R*(exp(pi*im*n[j]))/2);
        end
        end
    end
    return kernela
end

function Kerd(θμ, σ, η, t)
    n,w = gausslegendre(N)
    kerneld = zeros(ComplexF64, 2N, 2N)
    Threads.@threads for i = 1:N
        Threads.@threads for j = 1:N
            if (i == j )
                
            else
                kerneld[i,j] = (1- (((1-(t/(R*(exp(pi*im*n[j])))))^(2θμ[2]))*
                (_₂F₁((θμ[2]+θμ[1]-σ),(θμ[2]-θμ[1]-σ), -2σ,(R*(exp(pi*im*n[i]))))*
                _₂F₁((θμ[2]+θμ[1]+σ),(θμ[2]-θμ[1]+σ), 2σ,(R*(exp(pi*im*n[j])))) -
                ( (((θμ[1]^2 -(θμ[2]-σ)^2)*(t^(-2σ))*(exp(-im*η))/(2σ*(1-2σ)))*(t/(R*(exp(pi*im*n[i]))))*
                _₂F₁((1+θμ[2]+θμ[1]-σ),(1+θμ[2]-θμ[1]-σ),(2-2σ),(t/(R*(exp(pi*im*n[i]))))))*
                (((θμ[1]^2 -(θμ[2]+σ)^2)*(t^(2σ))*(exp(im*η))/(2σ*(1+2σ)))*(t/(R*(exp(pi*im*n[i]))))*
                _₂F₁((1+θμ[2]+θμ[1]+σ),(1+θμ[2]-θμ[1]+σ),(2+2σ),(t/(R*(exp(pi*im*n[i])))))) ) )*
                sqrt(w[j])*sqrt(w[i])*(R*(exp(pi*im*n[j]))/2)/
                (((R*(exp(pi*im*n[i]))))-((R*(exp(pi*im*n[j])))));
            end
        end
    end
end
function Gee(σ,θ1, θ2)
    psi = zeros(ComplexF64,2,2, N+1)
    a = (σ-θ1+θ2)/2;
    b = (σ-θ1-θ2)/2;
    psi[:,:,1] = Matrix{ComplexF64}(I,2,2);
    psi[:,:,2] = [[(a*b)/σ ((1+σ)*(-a)*b)/σ];[((σ-a)*(σ-b)*(1-σ))/σ ((σ-a)*(b-σ))/σ]];
    for p = 3:(N+1)
        psi[:,:,p] = ([ ((a+p-2)*(b+p-2)/((p-1)*(σ+p-2)))*psi[1,1, p-1]
                      ((a-σ+p-2)*(b-σ+p-2)/((p-1-σ)*(p-2)))*psi[2,1, p-1] ;
                      ((a+p-2)*(b+p-2)/((p-2)*(σ+p-1)))*psi[1,2, p-1]
                      ((a-σ+p-2)*(b-σ+p-2)/((p-1)*(p-σ-2)))*psi[2,2, p-1] ])
    end
    return psi
end

function Aparallel(ind, vecg, vecginv)
    result = zeros(ComplexF64,2,2);
    if ind[2] < (ind[1]+1)
         Threads.@threads for i = 1:(N-ind[1])
            result += -vecg[:,:,(N+1-ind[1]-i)]*vecginv[:,:,(ind[2]+i+1)];
        end
    end
    return result
end

function BuildA(θμ, σ)
    vecg = Gee(σ[1], θμ[3], θμ[4]);
    vecginv = Invseries(vecg);
    ind = [(p,q) for p in range(1,N) for q in range(1,N)];
    OPA = zeros(ComplexF64,2,2, N^2)
    Threads.@threads for i = 1:(N^2)
    #for i = 1:(N^2)
        OPA[:,:,i] = Aparallel(ind[i], vecg, vecginv)
    end
    A = zeros(ComplexF64,2N,2N);
    Threads.@threads for p = 1:N
    #for p = 1:N
        if (p == 1)
            Threads.@threads for q = 1:N
            #for q = 1:N
                A[(2p-1):(2p), (2q-1):(2q)] = OPA[:,:,(p+q-1)];
            end
        else
            Threads.@threads for q = 1:N
            #for q = 1:N
                A[(2p-1):(2p), (2q-1):(2q)] = OPA[:,:,N*(p-1)+q-1];
            end
        end
    end
    return LowerTriangular(A)
end

function Dparallel(ind, vecg, vecginv)
    result = zeros(ComplexF64,2,2);
    if ind[2] > (ind[1]-1)
        Threads.@threads for i = 1:(ind[1]+1)
            result += -vecg[:,:,(ind[1]-i+1)]*vecginv[:,:,(N - ind[2]+i)];
        end
    end
    return result
end

function BuildD(θμ, σ)
    vecg = Gee( ((-1)*(σ[1])), θμ[2], θμ[1]);
    vecginv = Invseries(vecg);
    ind = [(p,q) for p in range(1,N) for q in range(1,N)];
    OPD = zeros(ComplexF64,2,2, N^2)
    Threads.@threads for i = 1:(N^2)
    #for i = 1:(N^2)
        OPD[:,:,i] = Aparallel(ind[i], vecg, vecginv)
    end
    D = zeros(Complex,2N,2N);
    Threads.@threads for p = 1:N
    #for p = 1:N
        if (p == 1)
            Threads.@threads for q = 1:N
            #for q = 1:N
                D[(2p-1):(2p), (2q-1):(2q)] = OPD[:, :, p+q-1];
            end
        else
            Threads.@threads for q = 1:N
            #for q = 1:N
                D[(2p-1):(2p), (2q-1):(2q)] = OPD[:, :, N*(p-1)+q];
            end
        end
    end
    return UpperTriangular(D)
end

function MultD(OpD, σ, η, t)
    tm = [[(t^(-σ/2))/(sqrt(η)) 0];[0 (t^(σ/2))*(sqrt(η))]];
    tminv = [[(t^(σ/2))*(sqrt(η)) 0];[0 (t^(-σ/2))/(sqrt(η))]];
    MultD = zeros(ComplexF64, 2N, 2N);
    Threads.@threads for p = 1:N
    #for p = 1:N
        Threads.@threads for q = 1:N
        #for q = 1:N
            MultD[(2p-1):(2p), (2q-1):(2q)] = ((t^(N+p-q)).*(tm*(OpD[(2p-1):(2p), (2q-1):(2q)])*tminv));
        end
    end
    return MultD
end

function τVI(OpA,OpD, σ, θμ, η, t)
    MD=MultD(OpD, σ[1], η, t);
    OPK = (OpA*MD);
    Fred = (Matrix{Float64}(I,2N,2N)-OPK);
    τ = (t^(((σ[1]^2) - (θμ[1]^2) - (θμ[2]^2))/4))*((1-t)^(-2*θμ[2]*θμ[3]))*(det(Fred));
    return τ
end

function MultDdiff(OpD, σ, η, t)
    tm = [ (t^(-σ/2))/(sqrt(η)) 0 ; 0 (t^(σ/2))*(sqrt(η)) ];
    tminv = [ (t^(σ/2))*(sqrt(η)) 0 ; 0 (t^(-σ/2))/(sqrt(η))];
    sigma3 = [ 1 0; 0 -1]
    result = zeros(ComplexF64, 2N, 2N)
    Threads.@threads for p = 1:N
        Threads.@threads for q = 1:N
            tid = [ t^(N+p-q) 0 ; 0 t^(N+p-q) ];
            X = tid*tm*OpD[(2p-1):(2p),(2q-1):(2q)]*tminv;
            A = [ (N+p-q)/t 0 ; 0 (N+p-q)/t ]*X
            B = [ σ/(2*t) 0 ; 0 σ/(2*t) ]*(sigma3*X-X*sigma3)
            # it seems Julia gets confuse with operation hierarchy...
            result[(2p-1):(2p),(2q-1):(2q)] = A - B
        end
    end
    return result
end

function MultDdiff2(OpD, σ, η, t)
    tm = [ (t^(-σ/2)/(sqrt(η))) 0 ; 0 (t^(σ/2)*(sqrt(η))) ];
    tminv = [ (t^(σ/2)*(sqrt(η))) 0 ; 0 (t^(-σ/2)/(sqrt(η))) ];
    sigma3 = [ 1 0; 0 -1]
    result = zeros(ComplexF64, 2N, 2N)
    Threads.@threads for p = 1:N
        Threads.@threads for q = 1:N
            tid = [ t^(N+p-q) 0 ; 0 (t^(N+p-q)) ];
            X = tid*tm*OpD[(2p-1):(2p),(2q-1):(2q)]*tminv
            A = [ (N+p-q)*(N+p-q-1.0)/(t^2) 0 ; 0 (N+p-q)*(N+p-q-1.0)/(t^2) ]*X
            B = [ σ^2/(2*t^2) 0 ; 0 σ^2/(2*t^2) ]*(X-sigma3*X*sigma3)
            C = [ σ/(2*t^2)-(N+p-q)*σ/(t^2) 0 ; 0 σ/(2*t^2)-(N+p-q)*σ/(t^2) ]*(sigma3*X-X*sigma3)
            result[(2p-1):(2p),(2q-1):(2q)] = A + B + C
        end
    end
    return result
end

function firstlogdiffVI(OpA,OpD,σ, θμ, η, t)
    OPK = (OpA)*(MultD(OPD,σ[1],η,t))
    OPKdiff = OpA*MultDdiff(OPD,σ[1],η,t)
    BIGM = -inv(Matrix{Float64}(I,2N,2N)-OPK)*OPKdiff
    value = tr(BIGM)
    return (σ[1]^2-θμ[1]^2-θμ[2]^2)/(4*t)-θμ[2]*θμ[3]/(2*(t-1))+value
end

function secondlogdiffVI(OpA,OpD,σ, θμ, η, t)
    OPK = OpA*MultD(OPD,σ[1],η,t)
    OPKdiff = OpA*MultDdiff(OPD,σ[1],η,t)
    OPKdiff2 = OpA*MultDdiff2(OPD,σ[1],η,t)
    Minv = -inv(Matrix{Float64}(I,2N,2N)-OPK)
    value1 = tr(Minv*OPKdiff)
    value2 = tr(Minv*OPKdiff*Minv*OPKdiff+Minv*OPKdiff2)
    value = -(2t-1)*value1-t*(t-1)*value2
    return (σ[1]^2-θμ[1]^2-θμ[2]^2)/4-θμ[2]*θμ[3]/2+value
end

function σVI(OpA,OpD, σ, θμ, η, t)
    prefactor = -(θμ[1]^2+θμ[2]^2-θμ[3]^2-θμ[4]^2)/8+(θμ[2]^2-θμ[4]^2)/4*t;
    return t*(t-1)*firstlogdiffVI(OpA,OpD, σ, θμ, η, t)+prefactor
end

#θs = [1/(2sqrt(2)), (1/(2sqrt(2)))im, 1/(2sqrt(2)), -2]
#σs = [(1/(2sqrt(2)))*(2+im), (1/(2sqrt(2)))*(2+im), 1]
θs = [ 0.3804+0.6212*im 0.8364-0.4218*im 0.6858+0.6628*im 0.0326+0.3610*im ]
σs = [ -0.6544-0.9622*im 0.1916+0.6336*im 0.9524+0.2056*im ]


η = computeη(θs, σs)
OPA = BuildA(θs, σs)
OPD = BuildD(θs, σs)
t = 0.1;
Painleveτ = τVI(OPA,OPD, σs, θs, η, t)
Painσ = σVI(OPA,OPD, σs, θs, η, t)



kernela[1,1] = (sqrt(w[1]))*((((1-(R*(exp(2*pi*im*(n[1]^2))))^(2θs[3]))*
((_₂F₁((θs[3]+θs[4]+σs[1]),(θs[3]-θs[4]+σs[1]),2σs[1],(R*(exp(2*pi*im*(n[1]^2)))))*
_₂F₁((θs[3]+θs[4]-σs[1]),(θs[3]-θs[4]-σs[1]),-2σs[1],(R*(exp(2*pi*im*(n[1]^2)))))) -
(_₂F₁((1+θs[3]+θs[4]+σs[1]),(θs[3]-θs[4]+σs[1]),2+2σs[1],(R*(exp(2*pi*im*(n[1]^2)))))*
_₂F₁((1+θs[3]+θs[4]-σs[1]),(θs[3]-θs[4]-σs[1]),2-2σs[1],(R*(exp(2*pi*im*(n[1]^2)))))*
((θs[4]^2 -(θs[3]+σs[1])^2)/(2σs[1]*(1+2σs[1])))*
(-(θs[4]^2 -(θs[3]-σs[1])^2)/(2σs[1]*(1-2σs[1])))*
((R*(exp(2*pi*im*(n[1]^2))))*(R*(exp(2*pi*im*(n[1]^2))))))))- 1)*sqrt(w[1])*(2R*(n[1])))/
(((R*(exp(2*pi*im*(n[1]^2)))))-((R*(exp(2*pi*im*(n[1]^2))))));
